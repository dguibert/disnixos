{ networkFiles
, manifestFile
, nixpkgs ? <nixpkgs>
, disnix ? builtins.storePath @DISNIX_PREFIX@
, disnixos ? builtins.storePath @prefix@
, nixOpsModel ? false
}:

let
  pkgs = import nixpkgs {};
  
  lib = import ./lib.nix {
    inherit pkgs nixpkgs;
  };
  
  network = lib.generateMergedNetwork networkFiles nixOpsModel;
  
  testScript = ''
    startAll;
    
    ${pkgs.lib.concatMapStrings (targetName:
      ''
        ${"\$"}${targetName}->waitForJob("network.target");
        ${"\$"}${targetName}->waitForJob("disnix.service");
        my $pid = ${"\$"}${targetName}->mustSucceed("${pkgs.socat}/bin/socat tcp-listen:512,fork exec:/bin/sh & echo -n \$!");
        ${"\$"}${targetName}->mustSucceed("while [ \"\$(ps -p $pid | grep socat)\" = \"\" ]; do sleep 0.5; done");
      ''
    ) (builtins.attrNames network)}
    
    ${"\$"}${builtins.head (builtins.attrNames network)}->mustSucceed("${disnix}/bin/disnix-activate --interface ${disnixos}/bin/disnix-backdoor-client --no-coordinator-profile --no-lock ${manifestFile}");
    
    sleep 1e9;
  '';
in
pkgs.stdenv.mkDerivation {
  name = "testScript";
  buildCommand = ''
    cat > $out << "EOF"
    ${testScript}
    EOF
  '';
}
