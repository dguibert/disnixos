#!/bin/bash
set -e
set -o pipefail

# DisnixOS - Infrastructure deployment extension for Disnix
# Copyright (C) 2008-2015  Sander van der Burg
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

showUsage()
{
    cat <<EOF
Usage: $0 --target socat_address operation [OPTION] [paths]

The command \`disnix-backdoor-client' provides remote access to a
\`disnix-service' instance running on a machine in the network by using a
insecure socket with public access. This tool is designed for use with
\`disnixos-vm-env' to automatically deploy a system in a network of virtual
machines.

In most cases this command is not used directly, but is used by specifying the
--interface option for a Disnix command-line utility (such as \`disnix-env') or
by setting the \`DISNIX_CLIENT_INTERFACE' environment variable. By using one of
those properties, the Disnix tools will use the given interface instead of the
standard \`disnix-client' which only provides loopback access.

Options:

Operations:
  --import                   Imports a given closure into the Nix store of the
                             target machine. Optionally, transfers the closure
                             from this machine to the target machine
  --export                   Exports the closure of a given Nix store path of
                             the target machine into a file, and optionally
                             downloads it
  --print-invalid            Prints all the paths that are not valid in the Nix
                             store of the target machine
  -r, --realise              Realises the given store derivation on the target
                             machine
  --set                      Creates a Disnix profile only containing the given
                             derivation on the target machine
  -q, --query-installed      Queries all the installed services on the given
                             target machine
  --query-requisites         Queries all the requisites (intra-dependencies) of
                             the given services on the target machine
  --collect-garbage          Collects garbage on the given target machine
  --activate                 Activates the given service on the target machine
  --deactivate               Deactivates the given service on the target machine
  --lock                     Acquires a lock on a Disnix profile of the target
                             machine
  --unlock                   Release the lock on a Disnix profile of the target
                             machine
  --snapshot                 Snapshots the logical state of a component on the
                             given target machine
  --restore                  Restores the logical state of a component on the
                             given target machine
  --delete-state             Deletes the state of a component on the given
                             machine
  --query-all-snapshots      Queries all available snapshots of a component on
                             the given target machine
  --query-latest-snapshot    Queries the latest snapshot of a component on the
                             given target machine
  --print-missing-snapshots  Prints the paths of all snapshots not present on
                             the given target machine
  --import-snapshots         Imports the specified snapshots into the remote
                             snapshot store
  --export-snapshots         Exports the specified snapshot to the local
                             snapshot store
  --resolve-snapshots        Converts the relative paths to the snapshots to
                             absolute paths
  --clean-snapshots          Removes older snapshots from the snapshot store
  --help                     Shows the usage of this command to the user
  --version                  Shows the version of this command to the user

General options:
  -t, --target=TARGET        Specifies the hostname and optional port number of
                             the SSH server used to connect to the target
                             machine

Import/Export/Import snapshots/Export snapshots options:
  --localfile                Specifies that the given paths are stored locally
                             and must be transferred to the remote machine if
                             needed
  --remotefile               Specifies that the given paths are stored remotely
                             and must transferred from the remote machine if
                             needed

Set/Query installed/Lock/Unlock options:
  -p, --profile=PROFILE      Name of the Disnix profile. Defaults to: default
  
Collect garbage options:
  -d, --delete-old           Indicates whether all older generations of Nix
                             profiles must be removed as well

Activation/Deactivation/Snapshot/Restore/Delete state options:
  --type=TYPE                Specifies the activation module that should be
                             used, such as echo or process.

  --arguments=ARGUMENTS      Specifies the arguments passed to the Dysnomia
                             module, which is a string with key=value pairs

Query all snapshots/Query latest snapshot options:
  -C, --container=CONTAINER  Name of the container in which the component is managed
  -c, --component=COMPONENT  Name of the component hosted in a container

Clean snapshots options:
  --keep=NUM                 Amount of snapshot generations to keep. Defaults
                             to: 1

Environment:
  DISNIX_PROFILE             Sets the name of the profile that stores the
                             manifest on the coordinator machine and the
                             deployed services per machine on each target
                             (Defaults to: default)
  DYSNOMIA_STATEDIR          Specifies where the snapshots must be stored on the
                             coordinator machine (defaults to: /var/dysnomia)
EOF
}

# Shows the version of this command to the user

showVersion()
{
    cat <<EOF
$0 (@PACKAGE_NAME@ @PACKAGE_VERSION@)

Copyright (C) 2008-2015 Sander van der Burg
EOF
}

# Parse valid argument options

PARAMS=`@getopt@ -n $0 -o rqp:dhv -l import,export,print-invalid,realise,set,query-installed,query-requisites,collect-garbage,activate,deactivate,lock,unlock,target:,localfile,remotefile,profile:,delete-old,type:,arguments:,help,version -- "$@"`

if [ $? != 0 ]
then
    showUsage
    exit 1
fi

eval set -- "$PARAMS"

# Evaluate valid options

while [ "$1" != "--" ]
do
    case "$1" in
        --import)
            operation="import"
            ;;
        --export)
            operation="export"
            ;;
        --print-invalid)
            operation="print-invalid"
            ;;
        -r|--realise)
            operation="realise"
            ;;
        --set)
            operation="set"
            ;;
        -q|--query-installed)
            operation="query-installed"
            ;;
        --query-requisites)
            operation="query-requisites"
            ;;
        --collect-garbage)
            operation="collect-garbage"
            ;;
        --activate)
            operation="activate"
            path=$2
            ;;
        --deactivate)
            operation="deactivate"
            path=$2
            ;;
        --lock)
            operation="lock"
            path=$2
            ;;
        --unlock)
            operation="unlock"
            path=$2
            ;;
        --target)
            target=$2
            ;;
        --localfile)
            localfile=1
            ;;
        --remotefile)
            remotefile=1
            ;;
        -p|--profile)
            profileArg="--profile $2"
            ;;
        -d|--delete-old)
            deleteOldArg="-d"
            ;;
        --type)
            type=$2
            ;;
        --arguments)
            argsArg="$argsArg --arguments \"$2\""
            ;;
        -h|--help)
            showUsage
            exit 0
            ;;
        -v|--version)
            showVersion
            exit 0
            ;;
    esac
    
    shift
done

shift

# Validate the given options

if [ "$target" = "" ]
then
    echo "ERROR: A target address file must be specified!" >&2
    exit 1
fi

if [ "$TMPDIR" = "" ]
then
    export TMPDIR=/tmp
fi

export PATH=$PATH:$(dirname @socat@)

# Execute selected operation

case "$operation" in
    import)
        # Returns always true since host Nix store == guest Nix store
        ;;
    export)
        # Returns always true since host Nix store == guest Nix store
        ;;
    print-invalid)
        # Everything is always valid since we have no Nix DB
        ;;
    realise)
        outputFile=$(mktemp -p $TMPDIR)
        echo "disnix-client --realise $@; echo \$?" | socat stdio $target > $outputFile
        exitStatus=$(tail -1 $outputFile)
        head -n -1 $outputFile
        rm -f $outputFile
        exit $exitStatus
        ;;
    set)
        #outputFile=$(mktemp -p $TMPDIR)
        #echo "disnix-client $profileArg --set $@; echo \$?" | socat stdio $target > $outputFile
        #exitStatus=$(tail -1 $outputFile)
        #head -n -1 $outputFile
        #rm -f $outputFile
        #exit $exitStatus
        ;;
    query-installed)
        outputFile=$(mktemp -p $TMPDIR)
        echo "disnix-client $profileArg --query-installed $@; echo \$?" | socat stdio $target > $outputFile
        exitStatus=$(tail -1 $outputFile)
        head -n -1 $outputFile
        rm -f $outputFile
        exit $exitStatus
        ;;
    query-requisites)
        outputFile=$(mktemp -p $TMPDIR)
        echo "disnix-client --query-requisites $@; echo \$?" | socat stdio $target > $outputFile
        exitStatus=$(tail -1 $outputFile)
        head -n -1 $outputFile
        rm -f $outputFile
        exit $exitStatus
        ;;
    collect-garbage)
        outputFile=$(mktemp -p $TMPDIR)
        echo "disnix-client --collect-garbage $deleteOldArg $@; echo \$?" | socat stdio $target > $outputFile
        exitStatus=$(tail -1 $outputFile)
        head -n -1 $outputFile
        rm -f $outputFile
        exit $exitStatus
        ;;
    activate)
        if [ "$type" = "" ]
        then
            echo "ERROR: A type must be specified!" >&2
            exit 1
        fi
        
        outputFile=$(mktemp -p $TMPDIR)
        echo "disnix-client --type $type $argsArg --activate $@; echo \$?" | socat stdio $target > $outputFile
        exitStatus=$(tail -1 $outputFile)
        head -n -1 $outputFile
        rm -f $outputFile
        exit $exitStatus
        ;;
    deactivate)
        if [ "$type" = "" ]
        then
            echo "ERROR: A type must be specified!" >&2
            exit 1
        fi
        
        outputFile=$(mktemp -p $TMPDIR)
        echo "disnix-client --type $type $argsArg --deactivate $@; echo \$?" | socat stdio $target > $outputFile
        exitStatus=$(tail -1 $outputFile)
        head -n -1 $outputFile
        rm -f $outputFile
        exit $exitStatus
        ;;
    lock)
        outputFile=$(mktemp -p $TMPDIR)
        echo "disnix-client --lock $profileArg; echo \$?" | socat stdio $target > $outputFile
        exitStatus=$(tail -1 $outputFile)
        head -n -1 $outputFile
        rm -f $outputFile
        exit $exitStatus
        ;;
    unlock)
        outputFile=$(mktemp -p $TMPDIR)
        echo "disnix-client --unlock $profileArg; echo \$?" | socat stdio $target > $outputFile
        exitStatus=$(tail -1 $outputFile)
        head -n -1 $outputFile
        rm -f $outputFile
        exit $exitStatus
        ;;
esac
