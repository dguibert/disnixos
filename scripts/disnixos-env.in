#!/bin/bash -e
# Disnix - A distributed application layer for Nix
# Copyright (C) 2008-2010  Sander van der Burg
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

# Shows the usage of this command to the user

showUsage()
{
    echo "Usage: $0 -s services.nix -n network.nix [ -n network2.nix ... ] -d distribution.nix [options]"
    echo "Options:"
    echo
    echo "-s,--services       Services Nix expression which describes all components of the distributed system"
    echo "-n,--network        Network Nix expression which declares a NixOS configuration for each machine in the network"
    echo "-d,--distribution   Distribution Nix expression which maps services to machines in the network"
    echo "--target-property   The target property of an infrastructure model, that specifies how to "
    echo "                    connect to the remote Disnix interface. (Defaults to hostname)"
    echo "--interface         Process that communicates with the remote disnix service. Defaults to disnix-ssh-client"
    echo "-p,--profile        Name of the profile that is used for this system. Defaults to: default"
    echo "--use-nixops        Use NixOps instead of Disnix's deployment facilities"
    echo "--show-trace        Shows a trace of the output"
    echo "-h,--help           Shows the usage of this command"
}

# Autoconf settings
export prefix=@prefix@

# Import checks
source @datadir@/@PACKAGE@/checks

# Import Disnix checks
source @DISNIX_PREFIX@/share/disnix/checks

# Parse valid argument options

PARAMS=`getopt -n $0 -o s:n:d:p:h -l services:,network:,distribution:,profile:,target-property:,interface:,use-nixops,show-trace,help -- "$@"`

if [ $? != 0 ]
then
    showUsage
    exit 1
fi

eval set -- "$PARAMS"

# Evaluate valid options

while [ "$1" != "--" ]
do
    case "$1" in
        -s|--services)
	    servicesFile=`readlink -f $2`
	    ;;
	-n|--network)
	    networkFiles="$networkFiles `readlink -f $2`"
	    ;;
	-d|--distribution)
	    distributionFile=`readlink -f $2`
	    ;;
	-p|--profile)
	    profileArg="--profile $2"
	    ;;
	--target-property)
	    targetProperty=$2
	    ;;
	--interface)
	    interface=$2
	    ;;
	--use-nixops)
	    useNixOps=1
	    ;;
	--show-trace)
	    showTrace=1
	    ;;
	-h|--help)
	    showUsage
	    exit 0
	    ;;
    esac
    
    shift
done

# Validate the given options

checkServicesFile
checkNetworkFiles
checkDistributionFile
checkUseNixOps

# If no client interface is given and NixOps is used, then use the disnix-nixops-client by default
if [ "$useNixOps" = "1" ] && [ "$interface" = "" ] && [ "$DISNIX_CLIENT_INTERFACE" = "" ]
then
    interface=disnix-nixops-client
fi

checkClientInterface
checkTargetProperty
checkShowTrace

# Generate infrastructure model from network model
infrastructureFile=`disnixos-geninfra --no-out-link $noNixOpsArg $networkFiles`

if [ "$useNixOps" != "1" ]
then
    # Upgrade the NixOS configurations through Disnix if NixOps is not used
    disnixos-deploy-network --target-property $targetProperty --interface $interface $profileArg $showTraceArg $networkFiles
fi

# Upgrade the services
disnix-env -s $servicesFile -i $infrastructureFile -d $distributionFile --target-property $targetProperty --interface $interface $profileArg $showTraceArg
