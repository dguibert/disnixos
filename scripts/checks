#!/bin/bash
set -e
set -o pipefail

# DisnixOS - Infrastructure deployment extension for Disnix
# Copyright (C) 2008-2016  Sander van der Burg
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

# Checks whether a network expression is given. Exits with status 1 if not set.

checkNetworkFiles()
{
    if [ "$networkFiles" = "" ]
    then
        echo "ERROR: At least one network expression must be specified!" >&2
        exit 1
    fi
}

# Checks whether NixOps integration should be enabled

checkUseNixOps()
{
    if [ "$DISNIXOS_USE_NIXOPS" = "1" ]
    then
        useNixOps=1
    fi
}

# Locates the location of NixOps and adjusts NIX_PATH to refer to the NixOS
# module configuring NixOps specific properties

locateNixOps()
{
    export NIX_PATH=$NIX_PATH:nixops=$(dirname $(readlink -f $(type -p nixops)))/../share/nix/nixops
}

# Locates the location of Dysnomia and adjusts NIX_PATH to refer to the NixOS
# module configuring NixOps specific properties

locateDysnomia()
{
    export NIX_PATH=$NIX_PATH:dysnomia=$(dirname $(readlink -f $(type -p dysnomia)))/../share/dysnomia
}

# Sets all relevant parameter such as interface and nixOpsArgs to allow the
# NixOps integration to work

setNixOpsParams()
{
    if [ "$useNixOps" = "1" ]
    then
        locateNixOps
        interface=disnix-nixops-client
        nixOpsArg="--use-nixops"
    fi
}
