<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xml:id="chap-usage">

	<title>Usage</title>

        <para>
		DisnixOS offers some additional use cases in addition to the ones provided by the basic Disnix toolset, which are shown in this section.
        </para>
        
	<section>
		<title>Deploying the infrastructure</title>
		<para>
			To deploy a network of NixOS configurations of machines, the following instruction can be used:
		</para>
		
<screen>
$ disnixos-deploy-network network.nix
</screen>

		<para>
			By executing the command above, all the system configurations are built from the NixOS specifications,
			then distributed to the machines in the network and finally activated.
		</para>

		<para>
			The same command can also take multiple network models:
		</para>
		
<screen>
$ disnixos-deploy-network network-logical.nix network-physical.nix
</screen>

		<para>
			By executing the command above, the machine configurations in the logical and physical model are
			merged together by the NixOS module system into a single network configuration. Then the configurations are
			built, distributed and activated.
		</para>
	</section>
		
	<section>
		<title>Deploying the services and infrastructure at the same time</title>
		
		<para>
			In order to automatically deploy NixOS configurations in a network machines and the services of
			which a distributed system is composed, the following instruction can be used:
		</para>
		
<screen>
$ disnixos-env -s services.nix -n network.nix -d distribution.nix
</screen>
		
		<para>
			This command is essentially a combination of the <command>disnixos-deploy-network</command> (which
			deploys the infrastructure) and
			<command>disnix-env</command> (which deploys the services) commands.
		</para>
		
		<para>
			Likewise, it can also take multiple network models that get merged together:
		</para>
		
<screen>
$ disnixos-env -s services.nix -n network-logical.nix -n network-physical.nix -d distribution.nix
</screen>
		<para>
			The <command>disnixos-env</command> supports most of the options that <command>disnix-env</command>
			supports. For example, adding the <command>--build-on-targets</command> parameter builds all
			system configurations on the target machines, instead of the coordinator machine.
		</para>
	</section>
	
	<section>
		<title>Deploying services with DisnixOS and infrastructure with NixOps</title>
		
		<para>
			Besides using Disnix for deploying infrastructure, we can also take the facilities of NixOps into account and
			use its VM instantiation and provisioning properties. To easlily force all DisnixOS tools to use NixOps, we can
			set the following environment variable:
		</para>
		
<screen>
$ export DISNIXOS_USE_NIXOPS=1
</screen>
		
		<para>
			When this option is set, we can use NixOps to instantiate and deploy a network (which has the deployment name: <emphasis>test</emphasis>)
			of NixOS machines in the cloud:
		</para>
		
<screen>
$ nixops create ./network-logical.nix ./network-physical.nix -d test
$ nixops deploy -d test
</screen>
		<para>
			We can set the following environment variable to make <emphasis>test</emphasis> the default deployment and allowing it to be used
			by any DisnixOS utility:
		</para>
<screen>
$ export NIXOPS_DEPLOYMENT=test
</screen>
		<para>
			After NixOps is done deploying the system configurations, we can deploy the services into the network by running:
		</para>
		
<screen>
$ disnixos-env -s services.nix -n network-logical.nix -n network-physical.nix -d distribution.nix
</screen>

		<para>
			DisnixOS automatically uses NixOps' SSH connection facilities to connect to remote machines and execute remote deployment steps.
		</para>
		
	</section>
	
	<section>
		<title>Deploying a system in a virtual network</title>
		
		<para>
			You can also deploy a system in a network of cheaply instantiated virtual machines provided by the NixOS test driver, which is useful for testing.
			This can be done by executing the following instruction:
		</para>
		
<screen>
$ disnixos-vm-env -s services.nix -n network.nix -d distribution.nix
</screen>
		<para>
			The <command>disnixos-vm-env</command> command is almost similar to the <command>disnix-env</command> command,
			except that it generates and launches a network of virtual machine instances. Moreover, this command
			cannot be used to upgrade a system.
		</para>
	</section>
	
	<section>
		<title>Collecting garbage</title>
		<para>
			The DisnixOS toolset provides a wrapper around Disnix's garbage collector command to take a collection
			of network models instead of infrastructure model to automatically collect garbage from a network of
			machines. The following instruction uses two network models to connect and removes old
			generations of Nix profiles (through the <command>-d</command> option) as well:
		</para>
		
<screen>
$ disnixos-collect-garbage -d network-logical.nix network-physical.nix
</screen>
	</section>
	
	<section>
		<title>Building a system on the coordinator machine</title>
		
		<para>
			In order to just build the services on the coordinator machines, without distributing
			or activating, the following instruction can be used:
		</para>
		
<screen>
$ disnixos-manifest -s services.nix -n network-logical.nix -n network-physical.nix -d distribution.nix
</screen>
		
		<para>
			Apart from building services, we can also build the system configurations by using the same
			command:
		</para>
		
<screen>
$ disnixos-manifest -n network-logical.nix -n network-physical.nix 
</screen>
		<para>
			Omitting the services and distribution models, causes <command>disnixos-manifest</command> to build the NixOS system configurations.
			The resulting manifest files can be distributed to the target machines and activated by using the <command>disnix-distribute</command>
			and <command>disnix-activate</command> commands.
		</para>
	</section>
	
	<section>
		<title>Building system components on target machines</title>
		
		<para>
			As with the basic Disnix toolset we can also delegate builds to the target machines in the network.
			The following command generates a distributed derivation file for the services:
		</para>
		
<screen>
$ disnixos-instantiate -s services.nix -n network-logical.nix -n network-physical.nix -d distribution.nix
</screen>
		
		<para>
			Omitting the services and distribution models, causes <command>disnixos-instantiate</command> to generate
			a distributed derivation file for the system configurations (infrastructure):
		</para>
		
<screen>
$ disnixos-instantiate -n network-logical.nix -n network-physical.nix
</screen>

		<para>
			The resulting distributed derivation files for the services and infrastructure can be built by running:
		</para>
		
<screen>
$ disnix-build ./result
</screen>
	</section>
	
	<section>
		<title>Generating an infrastructure model</title>
		
		<para>
			DisnixOS uses a network model instead of an infrastructure model, which the basic Disnix toolset uses.
			Esentially, the semantics of these models are quite similar. The <command>disnixos-geninfra</command>
			can be used to generate an infrastructure model from the network model:
		</para>
		
<screen>
$ disnixos-geninfra network.nix
</screen>

		<para>
			The output of the tool is the path to the generated infrastructure model. This file can be used by tools in the
			basic Disnix toolset. For example:
		</para>
 
<screen>
$ disnix-collect-garbage $(disnixos-geninfra network.nix)
</screen>

		<para>
			The above command runs the Disnix garbage collector on machines defined in the network model.
		</para>
	</section>
	
	<section>
		<title>Automated testing of Disnix deployments</title>
		
		<para>
			Another use case of DisnixOS is to automatically package a Disnix project, build the corresponding manifest and run
			automated tests non-interactively from Nix expressions.
		</para>
		<para>
			<example xml:id="ex-5-disnixosjobset">
				<title>A Nix expression jobset for testing Disnix projects</title>
				<programlisting>
			
{ nixpkgs ? &lt;nixpkgs&gt;
, system ? builtins.currentSystem
}:

let
  pkgs = import nixpkgs { inherit system; };
  
  disnixos = import "${pkgs.disnixos}/share/disnixos/testing.nix" { <co xml:id='co-1-importDisnixos' />
    inherit nixpkgs system;
  };
  
  version = "1.0";
in
rec {
  tarball = disnixos.sourceTarball { <co xml:id='co-2-sourceTarball' />
    name = "testproject-zip";
    inherit version;
    src = ./.;
    officialRelease = false;
  };
  
  manifest = 
    disnixos.buildManifest { <co xml:id='co-3-buildManifest' />
    name = "test-project-manifest";
    version = builtins.readFile ./version;
    inherit tarball;
    servicesFile = "deployment/DistributedDeployment/services.nix";
    networkFile = "deployment/DistributedDeployment/network.nix";
    distributionFile = "deployment/DistributedDeployment/distribution.nix";
  };

  tests =
    disnixos.disnixTest { <co xml:id='co-4-disnixTest' />
      name = "test-project-tests";
      inherit tarball manifest;
      networkFile = "deployment/DistributedDeployment/network.nix";
      dysnomiaStateDir = /var/state/dysnomia;
      testScript =
        ''
          # Wait until the front-end application is deployed
          $test1->waitForFile("/var/tomcat/webapps/testapp");
           
          # Wait a little longer and capture the output of the entry page
          my $result = $test1->mustSucceed("sleep 10; curl --fail http://test2:8080/testapp");
        '';
    };
}
				</programlisting>
			</example>
		</para>
		
		<para>
			<xref linkend="ex-5-disnixosjobset" /> shows a Nix expression defining three jobs:
		</para>
		<calloutlist>
			<callout arearefs='co-1-importDisnixos'>
				<para>
					This line imports the testing function abstractions provided by DisnixOS.
				</para>
			</callout>
			<callout arearefs='co-2-sourceTarball'>
				<para>
				      This function invocation constructs a bzip2 compressed tarball containing all files belonging to a Disnix project.
				</para>
			</callout>
			<callout arearefs='co-3-buildManifest'>
				<para>
					Here, the three DisnixOS models provided by a source distribution are built from source code and a
					<filename>manifest.xml</filename> is produced. Basically this function abstraction does the same thing
					as the <command>disnixos-manifest</command> command.
				</para>
			</callout>
			<callout arearefs='co-4-disnixTest'>
				<para>
					This job spawns a network of QEMU machines inside a Nix build, consults DisnixOS to deploy the system and performs some testcases.
					Basically this function abstraction does mostly what the command <command>disnixos-vm-env</command> does, but in an non-interactive
					manner. Moreover, it also takes a test script as a parameter that is written in Perl. Test scripts use the facilities
					of the NixOS test driver for execution. Consult the NixOS manual for more details on how to write test scripts.
				</para>
				<para>
					Optionally, it can also refer to a Dysnomia snapshot folder. If a snapshot folder has been provided, they are restored in the VMs after the
					system has been successfully deployed.
				</para>
			</callout>
	      </calloutlist>
      </section>
</chapter>
