<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xml:id="chap-background">

	<title>Background</title>

	<para>
		<link xlink:href="http://nixos.org/nixos">NixOS</link>
		is a GNU/Linux distribution using the Nix package manager to manage
		all packages, system components (such as the Linux kernel) and configuration files.
		In NixOS, system configurations are derived from declarative specifications describing
		properties of the system, such as kernel modules, partitions, services and
		system packages.
	</para>
	
	<example xml:id="ex-1-nixos-configuration">
		<title>A NixOS configuration running a OpenSSH server</title>
<programlisting>
{pkgs, ...}: <co xml:id='co-1-functionHeader' />

{
  boot = { <co xml:id='co-2-boot' />
    loader = {
      grub = {
        device = "/dev/sda";
      };
    };
  };

  fileSystems = [ <co xml:id='co-3-filesystems' />
    { mountPoint = "/";
      device = "/dev/sda2";
    }
  ];

  swapDevices = [
    { device = "/dev/sda1"; }
  ];
  
  services = { <co xml:id='co-4-services' />
    openssh = {
      enable = true;
    };
  };

  environment = { <co xml:id='co-5-environment' />
    systemPackages = [
      pkgs.mc
      pkgs.subversion
      pkgs.lynx
    ];
  };  
}
</programlisting>
	</example>
	
	<para>
		<xref linkend="ex-1-nixos-configuration" /> shows a Nix expression describing the configuration
		of a machine.
	</para>
	
	<calloutlist>
		<callout arearefs='co-1-functionHeader'>
			<para>
				This line states that the expression is a function, having
				an argument called <varname>pkgs</varname>, which refers to
				<link xlink:href="http://nixos.org/nixpkgs">Nixpkgs</link>, 
				a collection of 2500 packages which can be deployed
				by the Nix package manager.
			</para>
		</callout>
		
		<callout arearefs='co-2-boot'>
			<para>
				This section of the NixOS specifcation describes the settings
				of the GRUB bootloader, such as that the partition containing
				the MBR is <filename>/dev/sda</filename>.
			</para>
		</callout>
		
		<callout arearefs='co-3-filesystems'>
			<para>
				This section of the NixOS specifcation describes the settings
				of hard drive partitions, such as the root partition and the
				swap partition.
			</para>
		</callout>
		
		<callout arearefs='co-4-services'>
			<para>
				This section of the NixOS specifcation describes the services
				running on the system, such as the OpenSSH server providing
				remote SSH access.
			</para>
		</callout>
		
		<callout arearefs='co-5-environment'>
			<para>
				This section of the NixOS specifcation describes the system packages,
				which can be used by all users on the machines, such as the
				Lynx web browser and Midnight Commander.
			</para>
		</callout>
	</calloutlist>
	
	<para>
		The specification in <xref linkend="ex-1-nixos-configuration" /> should be stored in the
		following location: <filename>/etc/nixos/configuration.nix</filename>. 
		The complete configuration can be built from source code and activated by running:
	</para>
	
<screen>
$ nixos-rebuild switch
</screen>

	<para>
		 NixOS configurations can also be used in an attribute set, describing a network
		 of machines:
	</para>

	<example xml:id="ex-2-network">
		<title>A network of NixOS configurations</title>
<programlisting>
{
  test1 = import ../configurations/openssh.nix; <co xml:id='co-1-openssh' />
  test2 = import ../configurations/tomcat.nix; <co xml:id='co-2-tomcat' />
  test3 = import ../configurations/httpd.nix;
}
</programlisting>
	</example>
	
	<para>
		<xref linkend="ex-2-network" /> shows a network of NixOS configurations. Basically, this
		expression is an attribute set in which each attribute refers to a NixOS configuration: 
	</para>
	
	<calloutlist>
		<callout arearefs='co-1-openssh'>
			<para>
				This attribute declares that we have a machine with identifier
				<varname>test1</varname>, having a configuration running a OpenSSH server,
				described earlier in <xref linkend="ex-1-nixos-configuration" />.
			</para>
		</callout>
		<callout arearefs='co-2-tomcat'>
			<para>
				This attribute declares that we have a machine with identifier
				<varname>test2</varname>, having a configuration running an Apache Tomcat server.
			</para>
		</callout>
	</calloutlist>
	
	<para>
		By typing the following instruction on the command line, the network of machines are built
		from source code, distributed to the target machines and finally activated:
	</para>
	
<screen>
$ disnixos-deploy-network network.nix
</screen>
	
	<para>
		In distributed environments, there are several more advanced features that may be desired to use.
		For example, each individual machine configuration has properties that are portable among any machine (such
		as the system services and end-user packages to run) and
		some properties are machine dependent, such as the partitions and boot loader settings.
		Moreover, system configurations may also have dependencies on other machines in the network.
	</para>
	<para>
		NixOS network models also allow to separate machine configuration aspects in seperate files and
		to allow one machine configuration to refer to another.
		The following example shows a more advanced configuration capturing the logical aspects of machines
		in a network. Furthermore, the system configurations have references to each other:
	</para>
	
	<example xml:id="ex-3-network-logical">
		<title>A logical NixOS network model</title>
<programlisting>
{
  tomcat = {pkgs, ...}:
  
    {
      services = {
        openssh = {
          enable = true;
        };

        tomcat = {
          enable = true; <co xml:id='co-1-tomcat' />
        };
      };
    };
  
  httpd = {pkgs, nodes, ...}:
    
    {
       services = {
        openssh = {
          enable = true;
        };
	
	httpd = {
	  enable = true;
	  adminAddr = "admin@example.com";
	  extraModules = [ "proxy_balancer "];
	  extraConfig = ''
	    &lt;Proxy balancer://cluster&gt;
              Allow from all
              BalancerMember http://${nodes.tomcat.config.networking.hostName}:8080 retry=0 <co xml:id='co-2-reverseproxy' />
            &lt;/Proxy&gt;

            ProxyStatus       full
            ProxyPass         /server-status !
            ProxyPass         /       balancer://cluster/
            ProxyPassReverse  /       balancer://cluster/
	  '';
	};
      };
    };

}
</programlisting>
	</example>
	
	<para>
		The model in <xref linkend="ex-3-network-logical" /> is an attribute set in which each value refers to a
		NixOS configuration:
	</para>
	
	<calloutlist>
		<callout arearefs='co-1-tomcat'>
			<para>
				The <varname>tomcat</varname> machine is a simple configuration hosting Apache Tomcat serving
				an arbitrary number of web applications and an OpenSSH server.
			</para>
		</callout>
		<callout arearefs='co-2-reverseproxy'>
			<para>
				The <varname>httpd</varname> machine runs a reverse proxy that forwards all incoming requests to the Apache Tomcat server.
				It fetches the hostname of the <varname>tomcat</varname> machine's configuration through the <varname>nodes</varname>
				parameter.
			</para>
		</callout>
	</calloutlist>
	
	<para>
		The logical network model above only captures machine independent properties and can be used in combination with a physical network model, capturing
		machine specific properties, such as the partitions and bootloader settings:
	</para>

	<example xml:id="ex-4-network-physical">
		<title>A physical NixOS network model</title>
<programlisting>
{
  tomcat = {pkgs, ...}:
  
    {
      boot = {
        loader = {
          grub = {
            device = "/dev/sda";
          };
        };
      };

      fileSystems = [
        { mountPoint = "/";
          device = "/dev/sda2";
        }
      ];

      swapDevices = [
        { device = "/dev/sda1"; }
      ];
    };
  
  httpd = {pkgs, ...}:
    
    {
      boot = {
        loader = {
          grub = {
            device = "/dev/sda";
          };
        };
      };

      fileSystems = [
        { mountPoint = "/";
          device = "/dev/sda3";
        }
      ];

      swapDevices = [
        { device = "/dev/sda2"; }
      ];
    };
}
</programlisting>
	</example>

	<para>
		The network in model shown in <xref linkend="ex-4-network-physical" /> captures machine-specific properties, such as partition and bootloader
		settings. With the following command the network can be deployed taking both the given logical and physical
		properties into account:
	</para>
	
<screen>
$ disnixos-deploy-network network-logical.nix network-physical.nix
</screen>
	
	<para>
		Disnix is a toolset supporting the deployment of services. DisnixOS combines the latter feature
		of using <command>disnixos-deploy-network</command> to deploy networks of NixOS machines,
		as addition to Disnix to provide infrastructure deployment.
	</para>
	
	<para>
		Physical network models can also refer to virtual machine properties hosted in an IaaS environment, such as Amazon EC2.
		If DisnixOS is used with NixOps, these machines can be automatically instantiated and deployed as well. Consult
		the NixOps manual for more details on VM instantiation and provisioning.
	</para>
</chapter>
