<refentry xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:xi="http://www.w3.org/2001/XInclude"
          xml:id="sec-disnixos-env">
          
	<refmeta>
		<refentrytitle>disnixos-env</refentrytitle>
		<manvolnum>1</manvolnum>
		<refmiscinfo class="source">DisnixOS</refmiscinfo>
		<refmiscinfo class="version"><xi:include href="version.txt" parse="text" /></refmiscinfo>
	</refmeta>
	
	<refnamediv>
		<refname>disnixos-env</refname>
		<refpurpose>Installs or updates the services and infrastructure of a distributed system</refpurpose>
	</refnamediv>
	
	<refsynopsisdiv>
		<cmdsynopsis>
			<command>disnixos-env</command>
			<arg choice="plain"><option>-s</option> <replaceable>services_expr</replaceable></arg>
			<arg choice="plain"><option>-n</option> <replaceable>network_expr</replaceable></arg>
			<arg choice="plain"><option>-d</option> <replaceable>distribution_expr</replaceable></arg>
			<arg><replaceable>options</replaceable></arg>
		</cmdsynopsis>
	</refsynopsisdiv>
	
	<refsection>
		<title>Description</title>
		
		<para>
			The command <command>disnixos-env</command> is used to install or upgrade the services and infrastructure of distributed
			system in a given environment.
			This command requires three Nix expressions as input parameters; A services model capturing
			the components of a distributed system and its inter-dependencies; A network model capturing
			the NixOS configurations of machines in the network and its properties and a distribution model which maps services to machines.
		</para>
		<para>
			By invoking this command it will first build, distribute and activate all the NixOS configurations of the
			machines in the network.
			Then it will build all the services that are defined in the distribution
			model from source code including all its dependencies. If all the services are successfully built,
			the closures of the services are transferred to the target machines in the network. Finally, the
			services are activated by traversing the inter-dependency graph of all the services.
			In case of a failure a rollback is performed to bring the system back in its previous configuration.
		</para>
		<para>
			When there is already a distributed system configuration deployed, an upgrade is performed. In this
			phase only the changed parts of the system are deactivated and activated. In this process we
			also deal with the inter-dependencies so that no services fails due to a missing inter-dependency.
		</para>
		<para>
			This command is essentially a composition of the <command>disnixos-deploy-network</command> command (which
			deploys the infrastructure) and the <command>disnix-env</command> (which deploys the services of which
			the system is composed).
		</para>
	</refsection>
	
	<refsection>
		<title>Options</title>
		
		<variablelist>
			<varlistentry>
				<term><option>-s</option>, <option>--services</option></term>
				<listitem>
					<para>
						Services Nix expression which describes all components of the distributed system
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><option>-n</option>, <option>--network</option></term>
				<listitem>
					<para>
						Network Nix expression which captures NixOS configurations of machines in the network
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><option>-d</option>, <option>--distribution</option></term>
				<listitem>
					<para>
						Distribution Nix expression which maps services to machines in the network
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><option>--target-property</option></term>
				<listitem>
					<para>
						The target property of an infrastructure model, that specifies how to connect
						to the remote Disnix interface. (Defaults to hostname)
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><option>--interface</option></term>
				<listitem>
					<para>
						Path to executable that communicates with a Disnix interface. Defaults to
						<command>disnix-ssh-client</command>.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><option>-p</option>, <option>--profile</option></term>
				<listitem>
					<para>
						Name of the profile that is used for this system. Defaults to: default
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><option>--show-trace</option></term>
				<listitem>
					<para>
						Shows a trace of the output.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><option>-h</option>, <option>--help</option></term>
				<listitem>
					<para>
						Shows the usage of this command to the user.
					</para>
				</listitem>
			</varlistentry>	
		</variablelist>
	</refsection>
	
	<refsection>
		<title>Environment variables</title>
		
		<variablelist>
			<varlistentry>
				<term><option>DISNIX_CLIENT_INTERFACE</option></term>
				<listitem>
					<para>
						Sets the client interface (which defaults to
						<command>disnix-ssh-client</command>)
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><option>DISNIX_TARGET_PROPERTY</option></term>
				<listitem>
					<para>
						Sets the target property of an infrastructure model,
						that specifies how to connect to the remote Disnix interface. (Defaults to hostname)
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
	</refsection>
</refentry>
