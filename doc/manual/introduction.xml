<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xml:id="chap-introduction">

	<title>Introduction</title>

	<para>
		Disnix is a distributed service deployment toolset which main
		purpose is to deploy service oriented systems (i.e. systems that can be
		decomposed into "distributable units") into networks of machines
		having various characteristics (such as operating systems) and is built on top of Nix;
		a package manager which has some unique features compared to conventional package
		managers to make deployment safe and reliable.
	</para>

	<para>
		The purpose of Disnix is to manage the deployment of distributable application
		components (or <emphasis>services</emphasis>) in a network of machines. Application
		components can be anything ranging from web services, web applications, databases,
		and ordinary processes.
	</para>
	<para>
		Disnix, however, expects the underlying infrastructure, such as machines running
		certain kinds of operating systems with certain containers (e.g. a DBMS or application server) to
		be present already. It does not manage the deployment of the infrastructure and their
		system configurations. Normally, a system administrator must manually install machines in the network
		having the required characteristics by following the installation steps of the operating system.
	</para>
	<para>
		Moreover, a system administrator or developer must manually write an infrastructure model, matching the
		actual configuration of the network in order to correctly deploy a service-oriented
		system, which may be a lot of work and error prone.
	</para>
	
	<para>
		This DisnixOS extension provides complementary infrastructure management tools for Disnix
		built on top of 
		<link xlink:href="http://nixos.org/nixos">NixOS</link>,
		a GNU/Linux distribution built around the Nix package manager. NixOS is a distribution
		in which complete system configurations can be built from declarative specifications and
		supports atomic upgrades and rollbacks of complete system configurations.
	</para>
	
	<section>
		<title>Features</title>
		
		<para>
			DisnixOS adds the following features to the basic Disnix toolset:
		</para>
		<simplesect>
			<title>Infrastructure deployment</title>
			<para>
				DisnixOS allows you to write a network of NixOS configurations in a model and
				to automatically deploy the system configurations in a network of machines through
				the Disnix interface.
			</para>
		</simplesect>
		
		<simplesect>
			<title>Infrastructure virtualisation</title>
			<para>
				DisnixOS uses the NixOS test driver to build a network of virtual machines
				closely matching the actual network and automatically deploys the service-oriented system
				in the virtual network,	so that it can be easily tested by developers.
			</para>
		</simplesect>
		
		<simplesect>
			<title>Automated testing of a service-oriented system</title>
			<para>
				DisnixOS uses the NixOS test driver techniques, used for the NixOS
				testsuite, to automatically script the deployment and testcases in a distributed
				environment, so that a service-oriented system can be automatically tested, and run on
				<link xlink:href="http://nixos.org/hydra">Hydra</link>,
				a continuous build and integration server built on top of Nix.
			</para>
		</simplesect>
		
		<simplesect>
			<title>Infrastructure instantiation and provisioning</title>
			<para>
				DisnixOS can also be used in combination with <link xlink:href="http://github.com/nixos/nixops">NixOps</link>,
				a tool that deploys networks of NixOS configurations and automatically instantiate and provisions
				virtual machines in an IaaS environment, such as Amazon EC2.
			</para>
		</simplesect>
	</section>
</chapter>
